package ast

import (
	"go/parser"
	"go/token"
	"os"
	"testing"
)

func TestFindImportSpecInFile(t *testing.T) {
	tests := []struct {
		name         string
		filename     string
		importPath   string
		fileContent  string
		expectedInfo *ImportInfo
		expectError  bool
	}{
		{
			name:       "simple import found",
			filename:   "test.go",
			importPath: "fmt",
			fileContent: `package main

import "fmt"

func main() {
	fmt.Println("hello")
}`,
			expectedInfo: &ImportInfo{
				Found: true,
				Alias: "",
			},
			expectError: false,
		},
		{
			name:       "aliased import found",
			filename:   "test.go",
			importPath: "fmt",
			fileContent: `package main

import f "fmt"

func main() {
	f.Println("hello")
}`,
			expectedInfo: &ImportInfo{
				Found: true,
				Alias: "f",
			},
			expectError: false,
		},
		{
			name:       "import not found",
			filename:   "test.go",
			importPath: "os",
			fileContent: `package main

import "fmt"

func main() {
	fmt.Println("hello")
}`,
			expectedInfo: &ImportInfo{
				Found: false,
			},
			expectError: false,
		},
		{
			name:       "test file should",
			filename:   "test_test.go",
			importPath: "fmt",
			fileContent: `package main

import "fmt"

func TestSomething(t *testing.T) {
	fmt.Println("hello")
}`,
			expectedInfo: &ImportInfo{
				Found: true,
			},
			expectError: false,
		},
		{
			name:       "generated file should return not found",
			filename:   "generated.go",
			importPath: "fmt",
			fileContent: `// Code generated by some tool. DO NOT EDIT.

package main

import "fmt"

func main() {
	fmt.Println("hello")
}`,
			expectedInfo: &ImportInfo{
				Found: false,
			},
			expectError: false,
		},
		{
			name:       "multiple imports - find correct one",
			filename:   "test.go",
			importPath: "os",
			fileContent: `package main

import (
	"fmt"
	"os"
	"strings"
)

func main() {
	fmt.Println("hello")
	os.Exit(0)
}`,
			expectedInfo: &ImportInfo{
				Found: true,
				Alias: "",
			},
			expectError: false,
		},
		{
			name:         "invalid go file",
			filename:     "invalid.go",
			importPath:   "fmt",
			fileContent:  `invalid go code here`,
			expectedInfo: nil,
			expectError:  true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// create a temporary file under tmp directory
			tmpFile, err := os.CreateTemp("", tt.filename)
			if err != nil {
				t.Fatalf("failed to create temp file: %v", err)
			}
			defer func() {
				_ = os.Remove(tmpFile.Name()) // clean up
			}()

			// write the file content to the temporary file
			if _, err := tmpFile.WriteString(tt.fileContent); err != nil {
				t.Fatalf("failed to write to temp file: %v", err)
			}
			_ = tmpFile.Close() // close the file to flush changes

			info, err := FindImportSpecInFile(tmpFile.Name(), tt.importPath)
			if (err != nil) != tt.expectError {
				t.Errorf("expected error: %v, got: %v", tt.expectError, err)
				return
			}

			if info == nil && tt.expectedInfo != nil {
				t.Errorf("expected non-nil ImportInfo, got nil")
				return
			}

			if info != nil && tt.expectedInfo != nil {
				if info.Found != tt.expectedInfo.Found || info.Alias != tt.expectedInfo.Alias {
					t.Errorf("expected %v, got %v", tt.expectedInfo, info)
				}
			}
		})
	}
}

func TestIsGeneratedFile(t *testing.T) {
	tests := []struct {
		name        string
		fileContent string
		expected    bool
	}{
		{
			name: "generated file with standard comment",
			fileContent: `// Code generated by some tool. DO NOT EDIT.

package main

func main() {}`,
			expected: true,
		},
		{
			name: "generated file with block comment",
			fileContent: `/*
Code generated by protoc-gen-go. DO NOT EDIT.
*/

package main

func main() {}`,
			expected: true,
		},
		{
			name: "regular file",
			fileContent: `package main

func main() {}`,
			expected: false,
		},
		{
			name: "file with partial generated comment",
			fileContent: `// Code generated
package main

func main() {}`,
			expected: false,
		},
		{
			name: "file with do not edit but no code generated",
			fileContent: `// DO NOT EDIT this file
package main

func main() {}`,
			expected: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			fileSet := token.NewFileSet()
			file, err := parser.ParseFile(fileSet, "test.go", tt.fileContent, parser.ParseComments)
			if err != nil {
				t.Fatalf("unexpected error parsing file: %v", err)
			}

			result := isGeneratedFile(file)
			if result != tt.expected {
				t.Errorf("expected %v, got %v", tt.expected, result)
			}
		})
	}
}
